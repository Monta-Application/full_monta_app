// Code generated by entc, DO NOT EDIT.

package rate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldLTE(FieldID, id))
}

// BusinessUnitID applies equality check predicate on the "business_unit_id" field. It's identical to BusinessUnitIDEQ.
func BusinessUnitID(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldBusinessUnitID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldOrganizationID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldUpdatedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldVersion, v))
}

// RateNumber applies equality check predicate on the "rate_number" field. It's identical to RateNumberEQ.
func RateNumber(v string) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldRateNumber, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldCustomerID, v))
}

// EffectiveDate applies equality check predicate on the "effective_date" field. It's identical to EffectiveDateEQ.
func EffectiveDate(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldEffectiveDate, v))
}

// ExpirationDate applies equality check predicate on the "expiration_date" field. It's identical to ExpirationDateEQ.
func ExpirationDate(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldExpirationDate, v))
}

// CommodityID applies equality check predicate on the "commodity_id" field. It's identical to CommodityIDEQ.
func CommodityID(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldCommodityID, v))
}

// ShipmentTypeID applies equality check predicate on the "shipment_type_id" field. It's identical to ShipmentTypeIDEQ.
func ShipmentTypeID(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldShipmentTypeID, v))
}

// OriginLocationID applies equality check predicate on the "origin_location_id" field. It's identical to OriginLocationIDEQ.
func OriginLocationID(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldOriginLocationID, v))
}

// DestinationLocationID applies equality check predicate on the "destination_location_id" field. It's identical to DestinationLocationIDEQ.
func DestinationLocationID(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldDestinationLocationID, v))
}

// RateAmount applies equality check predicate on the "rate_amount" field. It's identical to RateAmountEQ.
func RateAmount(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldRateAmount, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldComment, v))
}

// ApprovedByID applies equality check predicate on the "approved_by_id" field. It's identical to ApprovedByIDEQ.
func ApprovedByID(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldApprovedByID, v))
}

// ApprovedDate applies equality check predicate on the "approved_date" field. It's identical to ApprovedDateEQ.
func ApprovedDate(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldApprovedDate, v))
}

// UsageCount applies equality check predicate on the "usage_count" field. It's identical to UsageCountEQ.
func UsageCount(v int) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldUsageCount, v))
}

// MinimumCharge applies equality check predicate on the "minimum_charge" field. It's identical to MinimumChargeEQ.
func MinimumCharge(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldMinimumCharge, v))
}

// MaximumCharge applies equality check predicate on the "maximum_charge" field. It's identical to MaximumChargeEQ.
func MaximumCharge(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldMaximumCharge, v))
}

// BusinessUnitIDEQ applies the EQ predicate on the "business_unit_id" field.
func BusinessUnitIDEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDNEQ applies the NEQ predicate on the "business_unit_id" field.
func BusinessUnitIDNEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldBusinessUnitID, v))
}

// BusinessUnitIDIn applies the In predicate on the "business_unit_id" field.
func BusinessUnitIDIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldBusinessUnitID, vs...))
}

// BusinessUnitIDNotIn applies the NotIn predicate on the "business_unit_id" field.
func BusinessUnitIDNotIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldBusinessUnitID, vs...))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Rate {
	return predicate.Rate(sql.FieldLTE(FieldUpdatedAt, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Rate {
	return predicate.Rate(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Rate {
	return predicate.Rate(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Rate {
	return predicate.Rate(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Rate {
	return predicate.Rate(sql.FieldLTE(FieldVersion, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldStatus, vs...))
}

// RateNumberEQ applies the EQ predicate on the "rate_number" field.
func RateNumberEQ(v string) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldRateNumber, v))
}

// RateNumberNEQ applies the NEQ predicate on the "rate_number" field.
func RateNumberNEQ(v string) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldRateNumber, v))
}

// RateNumberIn applies the In predicate on the "rate_number" field.
func RateNumberIn(vs ...string) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldRateNumber, vs...))
}

// RateNumberNotIn applies the NotIn predicate on the "rate_number" field.
func RateNumberNotIn(vs ...string) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldRateNumber, vs...))
}

// RateNumberGT applies the GT predicate on the "rate_number" field.
func RateNumberGT(v string) predicate.Rate {
	return predicate.Rate(sql.FieldGT(FieldRateNumber, v))
}

// RateNumberGTE applies the GTE predicate on the "rate_number" field.
func RateNumberGTE(v string) predicate.Rate {
	return predicate.Rate(sql.FieldGTE(FieldRateNumber, v))
}

// RateNumberLT applies the LT predicate on the "rate_number" field.
func RateNumberLT(v string) predicate.Rate {
	return predicate.Rate(sql.FieldLT(FieldRateNumber, v))
}

// RateNumberLTE applies the LTE predicate on the "rate_number" field.
func RateNumberLTE(v string) predicate.Rate {
	return predicate.Rate(sql.FieldLTE(FieldRateNumber, v))
}

// RateNumberContains applies the Contains predicate on the "rate_number" field.
func RateNumberContains(v string) predicate.Rate {
	return predicate.Rate(sql.FieldContains(FieldRateNumber, v))
}

// RateNumberHasPrefix applies the HasPrefix predicate on the "rate_number" field.
func RateNumberHasPrefix(v string) predicate.Rate {
	return predicate.Rate(sql.FieldHasPrefix(FieldRateNumber, v))
}

// RateNumberHasSuffix applies the HasSuffix predicate on the "rate_number" field.
func RateNumberHasSuffix(v string) predicate.Rate {
	return predicate.Rate(sql.FieldHasSuffix(FieldRateNumber, v))
}

// RateNumberEqualFold applies the EqualFold predicate on the "rate_number" field.
func RateNumberEqualFold(v string) predicate.Rate {
	return predicate.Rate(sql.FieldEqualFold(FieldRateNumber, v))
}

// RateNumberContainsFold applies the ContainsFold predicate on the "rate_number" field.
func RateNumberContainsFold(v string) predicate.Rate {
	return predicate.Rate(sql.FieldContainsFold(FieldRateNumber, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldCustomerID, vs...))
}

// EffectiveDateEQ applies the EQ predicate on the "effective_date" field.
func EffectiveDateEQ(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldEffectiveDate, v))
}

// EffectiveDateNEQ applies the NEQ predicate on the "effective_date" field.
func EffectiveDateNEQ(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldEffectiveDate, v))
}

// EffectiveDateIn applies the In predicate on the "effective_date" field.
func EffectiveDateIn(vs ...*pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldEffectiveDate, vs...))
}

// EffectiveDateNotIn applies the NotIn predicate on the "effective_date" field.
func EffectiveDateNotIn(vs ...*pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldEffectiveDate, vs...))
}

// EffectiveDateGT applies the GT predicate on the "effective_date" field.
func EffectiveDateGT(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldGT(FieldEffectiveDate, v))
}

// EffectiveDateGTE applies the GTE predicate on the "effective_date" field.
func EffectiveDateGTE(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldGTE(FieldEffectiveDate, v))
}

// EffectiveDateLT applies the LT predicate on the "effective_date" field.
func EffectiveDateLT(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldLT(FieldEffectiveDate, v))
}

// EffectiveDateLTE applies the LTE predicate on the "effective_date" field.
func EffectiveDateLTE(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldLTE(FieldEffectiveDate, v))
}

// EffectiveDateIsNil applies the IsNil predicate on the "effective_date" field.
func EffectiveDateIsNil() predicate.Rate {
	return predicate.Rate(sql.FieldIsNull(FieldEffectiveDate))
}

// EffectiveDateNotNil applies the NotNil predicate on the "effective_date" field.
func EffectiveDateNotNil() predicate.Rate {
	return predicate.Rate(sql.FieldNotNull(FieldEffectiveDate))
}

// ExpirationDateEQ applies the EQ predicate on the "expiration_date" field.
func ExpirationDateEQ(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldExpirationDate, v))
}

// ExpirationDateNEQ applies the NEQ predicate on the "expiration_date" field.
func ExpirationDateNEQ(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldExpirationDate, v))
}

// ExpirationDateIn applies the In predicate on the "expiration_date" field.
func ExpirationDateIn(vs ...*pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldExpirationDate, vs...))
}

// ExpirationDateNotIn applies the NotIn predicate on the "expiration_date" field.
func ExpirationDateNotIn(vs ...*pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldExpirationDate, vs...))
}

// ExpirationDateGT applies the GT predicate on the "expiration_date" field.
func ExpirationDateGT(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldGT(FieldExpirationDate, v))
}

// ExpirationDateGTE applies the GTE predicate on the "expiration_date" field.
func ExpirationDateGTE(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldGTE(FieldExpirationDate, v))
}

// ExpirationDateLT applies the LT predicate on the "expiration_date" field.
func ExpirationDateLT(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldLT(FieldExpirationDate, v))
}

// ExpirationDateLTE applies the LTE predicate on the "expiration_date" field.
func ExpirationDateLTE(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldLTE(FieldExpirationDate, v))
}

// ExpirationDateIsNil applies the IsNil predicate on the "expiration_date" field.
func ExpirationDateIsNil() predicate.Rate {
	return predicate.Rate(sql.FieldIsNull(FieldExpirationDate))
}

// ExpirationDateNotNil applies the NotNil predicate on the "expiration_date" field.
func ExpirationDateNotNil() predicate.Rate {
	return predicate.Rate(sql.FieldNotNull(FieldExpirationDate))
}

// CommodityIDEQ applies the EQ predicate on the "commodity_id" field.
func CommodityIDEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldCommodityID, v))
}

// CommodityIDNEQ applies the NEQ predicate on the "commodity_id" field.
func CommodityIDNEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldCommodityID, v))
}

// CommodityIDIn applies the In predicate on the "commodity_id" field.
func CommodityIDIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldCommodityID, vs...))
}

// CommodityIDNotIn applies the NotIn predicate on the "commodity_id" field.
func CommodityIDNotIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldCommodityID, vs...))
}

// CommodityIDIsNil applies the IsNil predicate on the "commodity_id" field.
func CommodityIDIsNil() predicate.Rate {
	return predicate.Rate(sql.FieldIsNull(FieldCommodityID))
}

// CommodityIDNotNil applies the NotNil predicate on the "commodity_id" field.
func CommodityIDNotNil() predicate.Rate {
	return predicate.Rate(sql.FieldNotNull(FieldCommodityID))
}

// ShipmentTypeIDEQ applies the EQ predicate on the "shipment_type_id" field.
func ShipmentTypeIDEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldShipmentTypeID, v))
}

// ShipmentTypeIDNEQ applies the NEQ predicate on the "shipment_type_id" field.
func ShipmentTypeIDNEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldShipmentTypeID, v))
}

// ShipmentTypeIDIn applies the In predicate on the "shipment_type_id" field.
func ShipmentTypeIDIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldShipmentTypeID, vs...))
}

// ShipmentTypeIDNotIn applies the NotIn predicate on the "shipment_type_id" field.
func ShipmentTypeIDNotIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldShipmentTypeID, vs...))
}

// ShipmentTypeIDIsNil applies the IsNil predicate on the "shipment_type_id" field.
func ShipmentTypeIDIsNil() predicate.Rate {
	return predicate.Rate(sql.FieldIsNull(FieldShipmentTypeID))
}

// ShipmentTypeIDNotNil applies the NotNil predicate on the "shipment_type_id" field.
func ShipmentTypeIDNotNil() predicate.Rate {
	return predicate.Rate(sql.FieldNotNull(FieldShipmentTypeID))
}

// OriginLocationIDEQ applies the EQ predicate on the "origin_location_id" field.
func OriginLocationIDEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldOriginLocationID, v))
}

// OriginLocationIDNEQ applies the NEQ predicate on the "origin_location_id" field.
func OriginLocationIDNEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldOriginLocationID, v))
}

// OriginLocationIDIn applies the In predicate on the "origin_location_id" field.
func OriginLocationIDIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldOriginLocationID, vs...))
}

// OriginLocationIDNotIn applies the NotIn predicate on the "origin_location_id" field.
func OriginLocationIDNotIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldOriginLocationID, vs...))
}

// OriginLocationIDIsNil applies the IsNil predicate on the "origin_location_id" field.
func OriginLocationIDIsNil() predicate.Rate {
	return predicate.Rate(sql.FieldIsNull(FieldOriginLocationID))
}

// OriginLocationIDNotNil applies the NotNil predicate on the "origin_location_id" field.
func OriginLocationIDNotNil() predicate.Rate {
	return predicate.Rate(sql.FieldNotNull(FieldOriginLocationID))
}

// DestinationLocationIDEQ applies the EQ predicate on the "destination_location_id" field.
func DestinationLocationIDEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldDestinationLocationID, v))
}

// DestinationLocationIDNEQ applies the NEQ predicate on the "destination_location_id" field.
func DestinationLocationIDNEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldDestinationLocationID, v))
}

// DestinationLocationIDIn applies the In predicate on the "destination_location_id" field.
func DestinationLocationIDIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldDestinationLocationID, vs...))
}

// DestinationLocationIDNotIn applies the NotIn predicate on the "destination_location_id" field.
func DestinationLocationIDNotIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldDestinationLocationID, vs...))
}

// DestinationLocationIDIsNil applies the IsNil predicate on the "destination_location_id" field.
func DestinationLocationIDIsNil() predicate.Rate {
	return predicate.Rate(sql.FieldIsNull(FieldDestinationLocationID))
}

// DestinationLocationIDNotNil applies the NotNil predicate on the "destination_location_id" field.
func DestinationLocationIDNotNil() predicate.Rate {
	return predicate.Rate(sql.FieldNotNull(FieldDestinationLocationID))
}

// RatingMethodEQ applies the EQ predicate on the "rating_method" field.
func RatingMethodEQ(v RatingMethod) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldRatingMethod, v))
}

// RatingMethodNEQ applies the NEQ predicate on the "rating_method" field.
func RatingMethodNEQ(v RatingMethod) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldRatingMethod, v))
}

// RatingMethodIn applies the In predicate on the "rating_method" field.
func RatingMethodIn(vs ...RatingMethod) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldRatingMethod, vs...))
}

// RatingMethodNotIn applies the NotIn predicate on the "rating_method" field.
func RatingMethodNotIn(vs ...RatingMethod) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldRatingMethod, vs...))
}

// RateAmountEQ applies the EQ predicate on the "rate_amount" field.
func RateAmountEQ(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldRateAmount, v))
}

// RateAmountNEQ applies the NEQ predicate on the "rate_amount" field.
func RateAmountNEQ(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldRateAmount, v))
}

// RateAmountIn applies the In predicate on the "rate_amount" field.
func RateAmountIn(vs ...float64) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldRateAmount, vs...))
}

// RateAmountNotIn applies the NotIn predicate on the "rate_amount" field.
func RateAmountNotIn(vs ...float64) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldRateAmount, vs...))
}

// RateAmountGT applies the GT predicate on the "rate_amount" field.
func RateAmountGT(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldGT(FieldRateAmount, v))
}

// RateAmountGTE applies the GTE predicate on the "rate_amount" field.
func RateAmountGTE(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldGTE(FieldRateAmount, v))
}

// RateAmountLT applies the LT predicate on the "rate_amount" field.
func RateAmountLT(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldLT(FieldRateAmount, v))
}

// RateAmountLTE applies the LTE predicate on the "rate_amount" field.
func RateAmountLTE(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldLTE(FieldRateAmount, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Rate {
	return predicate.Rate(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Rate {
	return predicate.Rate(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Rate {
	return predicate.Rate(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Rate {
	return predicate.Rate(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Rate {
	return predicate.Rate(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Rate {
	return predicate.Rate(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Rate {
	return predicate.Rate(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Rate {
	return predicate.Rate(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Rate {
	return predicate.Rate(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Rate {
	return predicate.Rate(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Rate {
	return predicate.Rate(sql.FieldContainsFold(FieldComment, v))
}

// ApprovedByIDEQ applies the EQ predicate on the "approved_by_id" field.
func ApprovedByIDEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldApprovedByID, v))
}

// ApprovedByIDNEQ applies the NEQ predicate on the "approved_by_id" field.
func ApprovedByIDNEQ(v uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldApprovedByID, v))
}

// ApprovedByIDIn applies the In predicate on the "approved_by_id" field.
func ApprovedByIDIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldApprovedByID, vs...))
}

// ApprovedByIDNotIn applies the NotIn predicate on the "approved_by_id" field.
func ApprovedByIDNotIn(vs ...uuid.UUID) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldApprovedByID, vs...))
}

// ApprovedByIDIsNil applies the IsNil predicate on the "approved_by_id" field.
func ApprovedByIDIsNil() predicate.Rate {
	return predicate.Rate(sql.FieldIsNull(FieldApprovedByID))
}

// ApprovedByIDNotNil applies the NotNil predicate on the "approved_by_id" field.
func ApprovedByIDNotNil() predicate.Rate {
	return predicate.Rate(sql.FieldNotNull(FieldApprovedByID))
}

// ApprovedDateEQ applies the EQ predicate on the "approved_date" field.
func ApprovedDateEQ(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldApprovedDate, v))
}

// ApprovedDateNEQ applies the NEQ predicate on the "approved_date" field.
func ApprovedDateNEQ(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldApprovedDate, v))
}

// ApprovedDateIn applies the In predicate on the "approved_date" field.
func ApprovedDateIn(vs ...*pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldApprovedDate, vs...))
}

// ApprovedDateNotIn applies the NotIn predicate on the "approved_date" field.
func ApprovedDateNotIn(vs ...*pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldApprovedDate, vs...))
}

// ApprovedDateGT applies the GT predicate on the "approved_date" field.
func ApprovedDateGT(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldGT(FieldApprovedDate, v))
}

// ApprovedDateGTE applies the GTE predicate on the "approved_date" field.
func ApprovedDateGTE(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldGTE(FieldApprovedDate, v))
}

// ApprovedDateLT applies the LT predicate on the "approved_date" field.
func ApprovedDateLT(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldLT(FieldApprovedDate, v))
}

// ApprovedDateLTE applies the LTE predicate on the "approved_date" field.
func ApprovedDateLTE(v *pgtype.Date) predicate.Rate {
	return predicate.Rate(sql.FieldLTE(FieldApprovedDate, v))
}

// ApprovedDateIsNil applies the IsNil predicate on the "approved_date" field.
func ApprovedDateIsNil() predicate.Rate {
	return predicate.Rate(sql.FieldIsNull(FieldApprovedDate))
}

// ApprovedDateNotNil applies the NotNil predicate on the "approved_date" field.
func ApprovedDateNotNil() predicate.Rate {
	return predicate.Rate(sql.FieldNotNull(FieldApprovedDate))
}

// UsageCountEQ applies the EQ predicate on the "usage_count" field.
func UsageCountEQ(v int) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldUsageCount, v))
}

// UsageCountNEQ applies the NEQ predicate on the "usage_count" field.
func UsageCountNEQ(v int) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldUsageCount, v))
}

// UsageCountIn applies the In predicate on the "usage_count" field.
func UsageCountIn(vs ...int) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldUsageCount, vs...))
}

// UsageCountNotIn applies the NotIn predicate on the "usage_count" field.
func UsageCountNotIn(vs ...int) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldUsageCount, vs...))
}

// UsageCountGT applies the GT predicate on the "usage_count" field.
func UsageCountGT(v int) predicate.Rate {
	return predicate.Rate(sql.FieldGT(FieldUsageCount, v))
}

// UsageCountGTE applies the GTE predicate on the "usage_count" field.
func UsageCountGTE(v int) predicate.Rate {
	return predicate.Rate(sql.FieldGTE(FieldUsageCount, v))
}

// UsageCountLT applies the LT predicate on the "usage_count" field.
func UsageCountLT(v int) predicate.Rate {
	return predicate.Rate(sql.FieldLT(FieldUsageCount, v))
}

// UsageCountLTE applies the LTE predicate on the "usage_count" field.
func UsageCountLTE(v int) predicate.Rate {
	return predicate.Rate(sql.FieldLTE(FieldUsageCount, v))
}

// UsageCountIsNil applies the IsNil predicate on the "usage_count" field.
func UsageCountIsNil() predicate.Rate {
	return predicate.Rate(sql.FieldIsNull(FieldUsageCount))
}

// UsageCountNotNil applies the NotNil predicate on the "usage_count" field.
func UsageCountNotNil() predicate.Rate {
	return predicate.Rate(sql.FieldNotNull(FieldUsageCount))
}

// MinimumChargeEQ applies the EQ predicate on the "minimum_charge" field.
func MinimumChargeEQ(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldMinimumCharge, v))
}

// MinimumChargeNEQ applies the NEQ predicate on the "minimum_charge" field.
func MinimumChargeNEQ(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldMinimumCharge, v))
}

// MinimumChargeIn applies the In predicate on the "minimum_charge" field.
func MinimumChargeIn(vs ...float64) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldMinimumCharge, vs...))
}

// MinimumChargeNotIn applies the NotIn predicate on the "minimum_charge" field.
func MinimumChargeNotIn(vs ...float64) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldMinimumCharge, vs...))
}

// MinimumChargeGT applies the GT predicate on the "minimum_charge" field.
func MinimumChargeGT(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldGT(FieldMinimumCharge, v))
}

// MinimumChargeGTE applies the GTE predicate on the "minimum_charge" field.
func MinimumChargeGTE(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldGTE(FieldMinimumCharge, v))
}

// MinimumChargeLT applies the LT predicate on the "minimum_charge" field.
func MinimumChargeLT(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldLT(FieldMinimumCharge, v))
}

// MinimumChargeLTE applies the LTE predicate on the "minimum_charge" field.
func MinimumChargeLTE(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldLTE(FieldMinimumCharge, v))
}

// MinimumChargeIsNil applies the IsNil predicate on the "minimum_charge" field.
func MinimumChargeIsNil() predicate.Rate {
	return predicate.Rate(sql.FieldIsNull(FieldMinimumCharge))
}

// MinimumChargeNotNil applies the NotNil predicate on the "minimum_charge" field.
func MinimumChargeNotNil() predicate.Rate {
	return predicate.Rate(sql.FieldNotNull(FieldMinimumCharge))
}

// MaximumChargeEQ applies the EQ predicate on the "maximum_charge" field.
func MaximumChargeEQ(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldEQ(FieldMaximumCharge, v))
}

// MaximumChargeNEQ applies the NEQ predicate on the "maximum_charge" field.
func MaximumChargeNEQ(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldNEQ(FieldMaximumCharge, v))
}

// MaximumChargeIn applies the In predicate on the "maximum_charge" field.
func MaximumChargeIn(vs ...float64) predicate.Rate {
	return predicate.Rate(sql.FieldIn(FieldMaximumCharge, vs...))
}

// MaximumChargeNotIn applies the NotIn predicate on the "maximum_charge" field.
func MaximumChargeNotIn(vs ...float64) predicate.Rate {
	return predicate.Rate(sql.FieldNotIn(FieldMaximumCharge, vs...))
}

// MaximumChargeGT applies the GT predicate on the "maximum_charge" field.
func MaximumChargeGT(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldGT(FieldMaximumCharge, v))
}

// MaximumChargeGTE applies the GTE predicate on the "maximum_charge" field.
func MaximumChargeGTE(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldGTE(FieldMaximumCharge, v))
}

// MaximumChargeLT applies the LT predicate on the "maximum_charge" field.
func MaximumChargeLT(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldLT(FieldMaximumCharge, v))
}

// MaximumChargeLTE applies the LTE predicate on the "maximum_charge" field.
func MaximumChargeLTE(v float64) predicate.Rate {
	return predicate.Rate(sql.FieldLTE(FieldMaximumCharge, v))
}

// MaximumChargeIsNil applies the IsNil predicate on the "maximum_charge" field.
func MaximumChargeIsNil() predicate.Rate {
	return predicate.Rate(sql.FieldIsNull(FieldMaximumCharge))
}

// MaximumChargeNotNil applies the NotNil predicate on the "maximum_charge" field.
func MaximumChargeNotNil() predicate.Rate {
	return predicate.Rate(sql.FieldNotNull(FieldMaximumCharge))
}

// HasBusinessUnit applies the HasEdge predicate on the "business_unit" edge.
func HasBusinessUnit() predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessUnitTable, BusinessUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessUnitWith applies the HasEdge predicate on the "business_unit" edge with a given conditions (other predicates).
func HasBusinessUnitWith(preds ...predicate.BusinessUnit) predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := newBusinessUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommodity applies the HasEdge predicate on the "commodity" edge.
func HasCommodity() predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CommodityTable, CommodityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommodityWith applies the HasEdge predicate on the "commodity" edge with a given conditions (other predicates).
func HasCommodityWith(preds ...predicate.Commodity) predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := newCommodityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentType applies the HasEdge predicate on the "shipment_type" edge.
func HasShipmentType() predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShipmentTypeTable, ShipmentTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentTypeWith applies the HasEdge predicate on the "shipment_type" edge with a given conditions (other predicates).
func HasShipmentTypeWith(preds ...predicate.ShipmentType) predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := newShipmentTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOriginLocation applies the HasEdge predicate on the "origin_location" edge.
func HasOriginLocation() predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OriginLocationTable, OriginLocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOriginLocationWith applies the HasEdge predicate on the "origin_location" edge with a given conditions (other predicates).
func HasOriginLocationWith(preds ...predicate.Location) predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := newOriginLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDestinationLocation applies the HasEdge predicate on the "destination_location" edge.
func HasDestinationLocation() predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DestinationLocationTable, DestinationLocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDestinationLocationWith applies the HasEdge predicate on the "destination_location" edge with a given conditions (other predicates).
func HasDestinationLocationWith(preds ...predicate.Location) predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := newDestinationLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApprovedBy applies the HasEdge predicate on the "approved_by" edge.
func HasApprovedBy() predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApprovedByTable, ApprovedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApprovedByWith applies the HasEdge predicate on the "approved_by" edge with a given conditions (other predicates).
func HasApprovedByWith(preds ...predicate.User) predicate.Rate {
	return predicate.Rate(func(s *sql.Selector) {
		step := newApprovedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Rate) predicate.Rate {
	return predicate.Rate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Rate) predicate.Rate {
	return predicate.Rate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Rate) predicate.Rate {
	return predicate.Rate(sql.NotPredicates(p))
}
