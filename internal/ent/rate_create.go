// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/commodity"
	"github.com/emoss08/trenova/internal/ent/customer"
	"github.com/emoss08/trenova/internal/ent/location"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/rate"
	"github.com/emoss08/trenova/internal/ent/shipmenttype"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// RateCreate is the builder for creating a Rate entity.
type RateCreate struct {
	config
	mutation *RateMutation
	hooks    []Hook
}

// SetBusinessUnitID sets the "business_unit_id" field.
func (rc *RateCreate) SetBusinessUnitID(u uuid.UUID) *RateCreate {
	rc.mutation.SetBusinessUnitID(u)
	return rc
}

// SetOrganizationID sets the "organization_id" field.
func (rc *RateCreate) SetOrganizationID(u uuid.UUID) *RateCreate {
	rc.mutation.SetOrganizationID(u)
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RateCreate) SetCreatedAt(t time.Time) *RateCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RateCreate) SetNillableCreatedAt(t *time.Time) *RateCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RateCreate) SetUpdatedAt(t time.Time) *RateCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RateCreate) SetNillableUpdatedAt(t *time.Time) *RateCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetVersion sets the "version" field.
func (rc *RateCreate) SetVersion(i int) *RateCreate {
	rc.mutation.SetVersion(i)
	return rc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (rc *RateCreate) SetNillableVersion(i *int) *RateCreate {
	if i != nil {
		rc.SetVersion(*i)
	}
	return rc
}

// SetStatus sets the "status" field.
func (rc *RateCreate) SetStatus(r rate.Status) *RateCreate {
	rc.mutation.SetStatus(r)
	return rc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rc *RateCreate) SetNillableStatus(r *rate.Status) *RateCreate {
	if r != nil {
		rc.SetStatus(*r)
	}
	return rc
}

// SetRateNumber sets the "rate_number" field.
func (rc *RateCreate) SetRateNumber(s string) *RateCreate {
	rc.mutation.SetRateNumber(s)
	return rc
}

// SetCustomerID sets the "customer_id" field.
func (rc *RateCreate) SetCustomerID(u uuid.UUID) *RateCreate {
	rc.mutation.SetCustomerID(u)
	return rc
}

// SetEffectiveDate sets the "effective_date" field.
func (rc *RateCreate) SetEffectiveDate(pg *pgtype.Date) *RateCreate {
	rc.mutation.SetEffectiveDate(pg)
	return rc
}

// SetExpirationDate sets the "expiration_date" field.
func (rc *RateCreate) SetExpirationDate(pg *pgtype.Date) *RateCreate {
	rc.mutation.SetExpirationDate(pg)
	return rc
}

// SetCommodityID sets the "commodity_id" field.
func (rc *RateCreate) SetCommodityID(u uuid.UUID) *RateCreate {
	rc.mutation.SetCommodityID(u)
	return rc
}

// SetNillableCommodityID sets the "commodity_id" field if the given value is not nil.
func (rc *RateCreate) SetNillableCommodityID(u *uuid.UUID) *RateCreate {
	if u != nil {
		rc.SetCommodityID(*u)
	}
	return rc
}

// SetShipmentTypeID sets the "shipment_type_id" field.
func (rc *RateCreate) SetShipmentTypeID(u uuid.UUID) *RateCreate {
	rc.mutation.SetShipmentTypeID(u)
	return rc
}

// SetNillableShipmentTypeID sets the "shipment_type_id" field if the given value is not nil.
func (rc *RateCreate) SetNillableShipmentTypeID(u *uuid.UUID) *RateCreate {
	if u != nil {
		rc.SetShipmentTypeID(*u)
	}
	return rc
}

// SetOriginLocationID sets the "origin_location_id" field.
func (rc *RateCreate) SetOriginLocationID(u uuid.UUID) *RateCreate {
	rc.mutation.SetOriginLocationID(u)
	return rc
}

// SetNillableOriginLocationID sets the "origin_location_id" field if the given value is not nil.
func (rc *RateCreate) SetNillableOriginLocationID(u *uuid.UUID) *RateCreate {
	if u != nil {
		rc.SetOriginLocationID(*u)
	}
	return rc
}

// SetDestinationLocationID sets the "destination_location_id" field.
func (rc *RateCreate) SetDestinationLocationID(u uuid.UUID) *RateCreate {
	rc.mutation.SetDestinationLocationID(u)
	return rc
}

// SetNillableDestinationLocationID sets the "destination_location_id" field if the given value is not nil.
func (rc *RateCreate) SetNillableDestinationLocationID(u *uuid.UUID) *RateCreate {
	if u != nil {
		rc.SetDestinationLocationID(*u)
	}
	return rc
}

// SetRatingMethod sets the "rating_method" field.
func (rc *RateCreate) SetRatingMethod(rm rate.RatingMethod) *RateCreate {
	rc.mutation.SetRatingMethod(rm)
	return rc
}

// SetNillableRatingMethod sets the "rating_method" field if the given value is not nil.
func (rc *RateCreate) SetNillableRatingMethod(rm *rate.RatingMethod) *RateCreate {
	if rm != nil {
		rc.SetRatingMethod(*rm)
	}
	return rc
}

// SetRateAmount sets the "rate_amount" field.
func (rc *RateCreate) SetRateAmount(f float64) *RateCreate {
	rc.mutation.SetRateAmount(f)
	return rc
}

// SetComment sets the "comment" field.
func (rc *RateCreate) SetComment(s string) *RateCreate {
	rc.mutation.SetComment(s)
	return rc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (rc *RateCreate) SetNillableComment(s *string) *RateCreate {
	if s != nil {
		rc.SetComment(*s)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RateCreate) SetID(u uuid.UUID) *RateCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RateCreate) SetNillableID(u *uuid.UUID) *RateCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// SetBusinessUnit sets the "business_unit" edge to the BusinessUnit entity.
func (rc *RateCreate) SetBusinessUnit(b *BusinessUnit) *RateCreate {
	return rc.SetBusinessUnitID(b.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (rc *RateCreate) SetOrganization(o *Organization) *RateCreate {
	return rc.SetOrganizationID(o.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (rc *RateCreate) SetCustomer(c *Customer) *RateCreate {
	return rc.SetCustomerID(c.ID)
}

// SetCommodity sets the "commodity" edge to the Commodity entity.
func (rc *RateCreate) SetCommodity(c *Commodity) *RateCreate {
	return rc.SetCommodityID(c.ID)
}

// SetShipmentType sets the "shipment_type" edge to the ShipmentType entity.
func (rc *RateCreate) SetShipmentType(s *ShipmentType) *RateCreate {
	return rc.SetShipmentTypeID(s.ID)
}

// SetOriginLocation sets the "origin_location" edge to the Location entity.
func (rc *RateCreate) SetOriginLocation(l *Location) *RateCreate {
	return rc.SetOriginLocationID(l.ID)
}

// SetDestinationLocation sets the "destination_location" edge to the Location entity.
func (rc *RateCreate) SetDestinationLocation(l *Location) *RateCreate {
	return rc.SetDestinationLocationID(l.ID)
}

// Mutation returns the RateMutation object of the builder.
func (rc *RateCreate) Mutation() *RateMutation {
	return rc.mutation
}

// Save creates the Rate in the database.
func (rc *RateCreate) Save(ctx context.Context) (*Rate, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RateCreate) SaveX(ctx context.Context) *Rate {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RateCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RateCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RateCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := rate.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := rate.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.Version(); !ok {
		v := rate.DefaultVersion
		rc.mutation.SetVersion(v)
	}
	if _, ok := rc.mutation.Status(); !ok {
		v := rate.DefaultStatus
		rc.mutation.SetStatus(v)
	}
	if _, ok := rc.mutation.RatingMethod(); !ok {
		v := rate.DefaultRatingMethod
		rc.mutation.SetRatingMethod(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := rate.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RateCreate) check() error {
	if _, ok := rc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit_id", err: errors.New(`ent: missing required field "Rate.business_unit_id"`)}
	}
	if _, ok := rc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "Rate.organization_id"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Rate.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Rate.updated_at"`)}
	}
	if _, ok := rc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Rate.version"`)}
	}
	if _, ok := rc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Rate.status"`)}
	}
	if v, ok := rc.mutation.Status(); ok {
		if err := rate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Rate.status": %w`, err)}
		}
	}
	if _, ok := rc.mutation.RateNumber(); !ok {
		return &ValidationError{Name: "rate_number", err: errors.New(`ent: missing required field "Rate.rate_number"`)}
	}
	if v, ok := rc.mutation.RateNumber(); ok {
		if err := rate.RateNumberValidator(v); err != nil {
			return &ValidationError{Name: "rate_number", err: fmt.Errorf(`ent: validator failed for field "Rate.rate_number": %w`, err)}
		}
	}
	if _, ok := rc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "Rate.customer_id"`)}
	}
	if _, ok := rc.mutation.RatingMethod(); !ok {
		return &ValidationError{Name: "rating_method", err: errors.New(`ent: missing required field "Rate.rating_method"`)}
	}
	if v, ok := rc.mutation.RatingMethod(); ok {
		if err := rate.RatingMethodValidator(v); err != nil {
			return &ValidationError{Name: "rating_method", err: fmt.Errorf(`ent: validator failed for field "Rate.rating_method": %w`, err)}
		}
	}
	if _, ok := rc.mutation.RateAmount(); !ok {
		return &ValidationError{Name: "rate_amount", err: errors.New(`ent: missing required field "Rate.rate_amount"`)}
	}
	if v, ok := rc.mutation.RateAmount(); ok {
		if err := rate.RateAmountValidator(v); err != nil {
			return &ValidationError{Name: "rate_amount", err: fmt.Errorf(`ent: validator failed for field "Rate.rate_amount": %w`, err)}
		}
	}
	if _, ok := rc.mutation.BusinessUnitID(); !ok {
		return &ValidationError{Name: "business_unit", err: errors.New(`ent: missing required edge "Rate.business_unit"`)}
	}
	if _, ok := rc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "Rate.organization"`)}
	}
	if _, ok := rc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "Rate.customer"`)}
	}
	return nil
}

func (rc *RateCreate) sqlSave(ctx context.Context) (*Rate, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RateCreate) createSpec() (*Rate, *sqlgraph.CreateSpec) {
	var (
		_node = &Rate{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(rate.Table, sqlgraph.NewFieldSpec(rate.FieldID, field.TypeUUID))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(rate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(rate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.Version(); ok {
		_spec.SetField(rate.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(rate.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := rc.mutation.RateNumber(); ok {
		_spec.SetField(rate.FieldRateNumber, field.TypeString, value)
		_node.RateNumber = value
	}
	if value, ok := rc.mutation.EffectiveDate(); ok {
		_spec.SetField(rate.FieldEffectiveDate, field.TypeOther, value)
		_node.EffectiveDate = value
	}
	if value, ok := rc.mutation.ExpirationDate(); ok {
		_spec.SetField(rate.FieldExpirationDate, field.TypeOther, value)
		_node.ExpirationDate = value
	}
	if value, ok := rc.mutation.RatingMethod(); ok {
		_spec.SetField(rate.FieldRatingMethod, field.TypeEnum, value)
		_node.RatingMethod = value
	}
	if value, ok := rc.mutation.RateAmount(); ok {
		_spec.SetField(rate.FieldRateAmount, field.TypeFloat64, value)
		_node.RateAmount = value
	}
	if value, ok := rc.mutation.Comment(); ok {
		_spec.SetField(rate.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if nodes := rc.mutation.BusinessUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rate.BusinessUnitTable,
			Columns: []string{rate.BusinessUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessunit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rate.OrganizationTable,
			Columns: []string{rate.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.CustomerTable,
			Columns: []string{rate.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.CommodityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.CommodityTable,
			Columns: []string{rate.CommodityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CommodityID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ShipmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.ShipmentTypeTable,
			Columns: []string{rate.ShipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShipmentTypeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.OriginLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.OriginLocationTable,
			Columns: []string{rate.OriginLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OriginLocationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.DestinationLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.DestinationLocationTable,
			Columns: []string{rate.DestinationLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DestinationLocationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RateCreateBulk is the builder for creating many Rate entities in bulk.
type RateCreateBulk struct {
	config
	err      error
	builders []*RateCreate
}

// Save creates the Rate entities in the database.
func (rcb *RateCreateBulk) Save(ctx context.Context) ([]*Rate, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Rate, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RateCreateBulk) SaveX(ctx context.Context) []*Rate {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RateCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RateCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
