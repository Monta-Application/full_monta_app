// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/emoss08/trenova/internal/ent/commodity"
	"github.com/emoss08/trenova/internal/ent/customer"
	"github.com/emoss08/trenova/internal/ent/location"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/predicate"
	"github.com/emoss08/trenova/internal/ent/rate"
	"github.com/emoss08/trenova/internal/ent/shipmenttype"
	"github.com/emoss08/trenova/internal/ent/user"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// RateUpdate is the builder for updating Rate entities.
type RateUpdate struct {
	config
	hooks     []Hook
	mutation  *RateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RateUpdate builder.
func (ru *RateUpdate) Where(ps ...predicate.Rate) *RateUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetOrganizationID sets the "organization_id" field.
func (ru *RateUpdate) SetOrganizationID(u uuid.UUID) *RateUpdate {
	ru.mutation.SetOrganizationID(u)
	return ru
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (ru *RateUpdate) SetNillableOrganizationID(u *uuid.UUID) *RateUpdate {
	if u != nil {
		ru.SetOrganizationID(*u)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RateUpdate) SetUpdatedAt(t time.Time) *RateUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetVersion sets the "version" field.
func (ru *RateUpdate) SetVersion(i int) *RateUpdate {
	ru.mutation.ResetVersion()
	ru.mutation.SetVersion(i)
	return ru
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ru *RateUpdate) SetNillableVersion(i *int) *RateUpdate {
	if i != nil {
		ru.SetVersion(*i)
	}
	return ru
}

// AddVersion adds i to the "version" field.
func (ru *RateUpdate) AddVersion(i int) *RateUpdate {
	ru.mutation.AddVersion(i)
	return ru
}

// SetStatus sets the "status" field.
func (ru *RateUpdate) SetStatus(r rate.Status) *RateUpdate {
	ru.mutation.SetStatus(r)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RateUpdate) SetNillableStatus(r *rate.Status) *RateUpdate {
	if r != nil {
		ru.SetStatus(*r)
	}
	return ru
}

// SetCustomerID sets the "customer_id" field.
func (ru *RateUpdate) SetCustomerID(u uuid.UUID) *RateUpdate {
	ru.mutation.SetCustomerID(u)
	return ru
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (ru *RateUpdate) SetNillableCustomerID(u *uuid.UUID) *RateUpdate {
	if u != nil {
		ru.SetCustomerID(*u)
	}
	return ru
}

// SetEffectiveDate sets the "effective_date" field.
func (ru *RateUpdate) SetEffectiveDate(pg *pgtype.Date) *RateUpdate {
	ru.mutation.SetEffectiveDate(pg)
	return ru
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (ru *RateUpdate) ClearEffectiveDate() *RateUpdate {
	ru.mutation.ClearEffectiveDate()
	return ru
}

// SetExpirationDate sets the "expiration_date" field.
func (ru *RateUpdate) SetExpirationDate(pg *pgtype.Date) *RateUpdate {
	ru.mutation.SetExpirationDate(pg)
	return ru
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (ru *RateUpdate) ClearExpirationDate() *RateUpdate {
	ru.mutation.ClearExpirationDate()
	return ru
}

// SetCommodityID sets the "commodity_id" field.
func (ru *RateUpdate) SetCommodityID(u uuid.UUID) *RateUpdate {
	ru.mutation.SetCommodityID(u)
	return ru
}

// SetNillableCommodityID sets the "commodity_id" field if the given value is not nil.
func (ru *RateUpdate) SetNillableCommodityID(u *uuid.UUID) *RateUpdate {
	if u != nil {
		ru.SetCommodityID(*u)
	}
	return ru
}

// ClearCommodityID clears the value of the "commodity_id" field.
func (ru *RateUpdate) ClearCommodityID() *RateUpdate {
	ru.mutation.ClearCommodityID()
	return ru
}

// SetShipmentTypeID sets the "shipment_type_id" field.
func (ru *RateUpdate) SetShipmentTypeID(u uuid.UUID) *RateUpdate {
	ru.mutation.SetShipmentTypeID(u)
	return ru
}

// SetNillableShipmentTypeID sets the "shipment_type_id" field if the given value is not nil.
func (ru *RateUpdate) SetNillableShipmentTypeID(u *uuid.UUID) *RateUpdate {
	if u != nil {
		ru.SetShipmentTypeID(*u)
	}
	return ru
}

// ClearShipmentTypeID clears the value of the "shipment_type_id" field.
func (ru *RateUpdate) ClearShipmentTypeID() *RateUpdate {
	ru.mutation.ClearShipmentTypeID()
	return ru
}

// SetOriginLocationID sets the "origin_location_id" field.
func (ru *RateUpdate) SetOriginLocationID(u uuid.UUID) *RateUpdate {
	ru.mutation.SetOriginLocationID(u)
	return ru
}

// SetNillableOriginLocationID sets the "origin_location_id" field if the given value is not nil.
func (ru *RateUpdate) SetNillableOriginLocationID(u *uuid.UUID) *RateUpdate {
	if u != nil {
		ru.SetOriginLocationID(*u)
	}
	return ru
}

// ClearOriginLocationID clears the value of the "origin_location_id" field.
func (ru *RateUpdate) ClearOriginLocationID() *RateUpdate {
	ru.mutation.ClearOriginLocationID()
	return ru
}

// SetDestinationLocationID sets the "destination_location_id" field.
func (ru *RateUpdate) SetDestinationLocationID(u uuid.UUID) *RateUpdate {
	ru.mutation.SetDestinationLocationID(u)
	return ru
}

// SetNillableDestinationLocationID sets the "destination_location_id" field if the given value is not nil.
func (ru *RateUpdate) SetNillableDestinationLocationID(u *uuid.UUID) *RateUpdate {
	if u != nil {
		ru.SetDestinationLocationID(*u)
	}
	return ru
}

// ClearDestinationLocationID clears the value of the "destination_location_id" field.
func (ru *RateUpdate) ClearDestinationLocationID() *RateUpdate {
	ru.mutation.ClearDestinationLocationID()
	return ru
}

// SetRatingMethod sets the "rating_method" field.
func (ru *RateUpdate) SetRatingMethod(rm rate.RatingMethod) *RateUpdate {
	ru.mutation.SetRatingMethod(rm)
	return ru
}

// SetNillableRatingMethod sets the "rating_method" field if the given value is not nil.
func (ru *RateUpdate) SetNillableRatingMethod(rm *rate.RatingMethod) *RateUpdate {
	if rm != nil {
		ru.SetRatingMethod(*rm)
	}
	return ru
}

// SetRateAmount sets the "rate_amount" field.
func (ru *RateUpdate) SetRateAmount(f float64) *RateUpdate {
	ru.mutation.ResetRateAmount()
	ru.mutation.SetRateAmount(f)
	return ru
}

// SetNillableRateAmount sets the "rate_amount" field if the given value is not nil.
func (ru *RateUpdate) SetNillableRateAmount(f *float64) *RateUpdate {
	if f != nil {
		ru.SetRateAmount(*f)
	}
	return ru
}

// AddRateAmount adds f to the "rate_amount" field.
func (ru *RateUpdate) AddRateAmount(f float64) *RateUpdate {
	ru.mutation.AddRateAmount(f)
	return ru
}

// SetComment sets the "comment" field.
func (ru *RateUpdate) SetComment(s string) *RateUpdate {
	ru.mutation.SetComment(s)
	return ru
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (ru *RateUpdate) SetNillableComment(s *string) *RateUpdate {
	if s != nil {
		ru.SetComment(*s)
	}
	return ru
}

// ClearComment clears the value of the "comment" field.
func (ru *RateUpdate) ClearComment() *RateUpdate {
	ru.mutation.ClearComment()
	return ru
}

// SetApprovedByID sets the "approved_by_id" field.
func (ru *RateUpdate) SetApprovedByID(u uuid.UUID) *RateUpdate {
	ru.mutation.SetApprovedByID(u)
	return ru
}

// SetNillableApprovedByID sets the "approved_by_id" field if the given value is not nil.
func (ru *RateUpdate) SetNillableApprovedByID(u *uuid.UUID) *RateUpdate {
	if u != nil {
		ru.SetApprovedByID(*u)
	}
	return ru
}

// ClearApprovedByID clears the value of the "approved_by_id" field.
func (ru *RateUpdate) ClearApprovedByID() *RateUpdate {
	ru.mutation.ClearApprovedByID()
	return ru
}

// SetApprovedDate sets the "approved_date" field.
func (ru *RateUpdate) SetApprovedDate(pg *pgtype.Date) *RateUpdate {
	ru.mutation.SetApprovedDate(pg)
	return ru
}

// ClearApprovedDate clears the value of the "approved_date" field.
func (ru *RateUpdate) ClearApprovedDate() *RateUpdate {
	ru.mutation.ClearApprovedDate()
	return ru
}

// SetUsageCount sets the "usage_count" field.
func (ru *RateUpdate) SetUsageCount(i int) *RateUpdate {
	ru.mutation.ResetUsageCount()
	ru.mutation.SetUsageCount(i)
	return ru
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (ru *RateUpdate) SetNillableUsageCount(i *int) *RateUpdate {
	if i != nil {
		ru.SetUsageCount(*i)
	}
	return ru
}

// AddUsageCount adds i to the "usage_count" field.
func (ru *RateUpdate) AddUsageCount(i int) *RateUpdate {
	ru.mutation.AddUsageCount(i)
	return ru
}

// ClearUsageCount clears the value of the "usage_count" field.
func (ru *RateUpdate) ClearUsageCount() *RateUpdate {
	ru.mutation.ClearUsageCount()
	return ru
}

// SetMinimumCharge sets the "minimum_charge" field.
func (ru *RateUpdate) SetMinimumCharge(f float64) *RateUpdate {
	ru.mutation.ResetMinimumCharge()
	ru.mutation.SetMinimumCharge(f)
	return ru
}

// SetNillableMinimumCharge sets the "minimum_charge" field if the given value is not nil.
func (ru *RateUpdate) SetNillableMinimumCharge(f *float64) *RateUpdate {
	if f != nil {
		ru.SetMinimumCharge(*f)
	}
	return ru
}

// AddMinimumCharge adds f to the "minimum_charge" field.
func (ru *RateUpdate) AddMinimumCharge(f float64) *RateUpdate {
	ru.mutation.AddMinimumCharge(f)
	return ru
}

// ClearMinimumCharge clears the value of the "minimum_charge" field.
func (ru *RateUpdate) ClearMinimumCharge() *RateUpdate {
	ru.mutation.ClearMinimumCharge()
	return ru
}

// SetMaximumCharge sets the "maximum_charge" field.
func (ru *RateUpdate) SetMaximumCharge(f float64) *RateUpdate {
	ru.mutation.ResetMaximumCharge()
	ru.mutation.SetMaximumCharge(f)
	return ru
}

// SetNillableMaximumCharge sets the "maximum_charge" field if the given value is not nil.
func (ru *RateUpdate) SetNillableMaximumCharge(f *float64) *RateUpdate {
	if f != nil {
		ru.SetMaximumCharge(*f)
	}
	return ru
}

// AddMaximumCharge adds f to the "maximum_charge" field.
func (ru *RateUpdate) AddMaximumCharge(f float64) *RateUpdate {
	ru.mutation.AddMaximumCharge(f)
	return ru
}

// ClearMaximumCharge clears the value of the "maximum_charge" field.
func (ru *RateUpdate) ClearMaximumCharge() *RateUpdate {
	ru.mutation.ClearMaximumCharge()
	return ru
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ru *RateUpdate) SetOrganization(o *Organization) *RateUpdate {
	return ru.SetOrganizationID(o.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ru *RateUpdate) SetCustomer(c *Customer) *RateUpdate {
	return ru.SetCustomerID(c.ID)
}

// SetCommodity sets the "commodity" edge to the Commodity entity.
func (ru *RateUpdate) SetCommodity(c *Commodity) *RateUpdate {
	return ru.SetCommodityID(c.ID)
}

// SetShipmentType sets the "shipment_type" edge to the ShipmentType entity.
func (ru *RateUpdate) SetShipmentType(s *ShipmentType) *RateUpdate {
	return ru.SetShipmentTypeID(s.ID)
}

// SetOriginLocation sets the "origin_location" edge to the Location entity.
func (ru *RateUpdate) SetOriginLocation(l *Location) *RateUpdate {
	return ru.SetOriginLocationID(l.ID)
}

// SetDestinationLocation sets the "destination_location" edge to the Location entity.
func (ru *RateUpdate) SetDestinationLocation(l *Location) *RateUpdate {
	return ru.SetDestinationLocationID(l.ID)
}

// SetApprovedBy sets the "approved_by" edge to the User entity.
func (ru *RateUpdate) SetApprovedBy(u *User) *RateUpdate {
	return ru.SetApprovedByID(u.ID)
}

// Mutation returns the RateMutation object of the builder.
func (ru *RateUpdate) Mutation() *RateMutation {
	return ru.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ru *RateUpdate) ClearOrganization() *RateUpdate {
	ru.mutation.ClearOrganization()
	return ru
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (ru *RateUpdate) ClearCustomer() *RateUpdate {
	ru.mutation.ClearCustomer()
	return ru
}

// ClearCommodity clears the "commodity" edge to the Commodity entity.
func (ru *RateUpdate) ClearCommodity() *RateUpdate {
	ru.mutation.ClearCommodity()
	return ru
}

// ClearShipmentType clears the "shipment_type" edge to the ShipmentType entity.
func (ru *RateUpdate) ClearShipmentType() *RateUpdate {
	ru.mutation.ClearShipmentType()
	return ru
}

// ClearOriginLocation clears the "origin_location" edge to the Location entity.
func (ru *RateUpdate) ClearOriginLocation() *RateUpdate {
	ru.mutation.ClearOriginLocation()
	return ru
}

// ClearDestinationLocation clears the "destination_location" edge to the Location entity.
func (ru *RateUpdate) ClearDestinationLocation() *RateUpdate {
	ru.mutation.ClearDestinationLocation()
	return ru
}

// ClearApprovedBy clears the "approved_by" edge to the User entity.
func (ru *RateUpdate) ClearApprovedBy() *RateUpdate {
	ru.mutation.ClearApprovedBy()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RateUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RateUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RateUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RateUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RateUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := rate.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RateUpdate) check() error {
	if v, ok := ru.mutation.Status(); ok {
		if err := rate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Rate.status": %w`, err)}
		}
	}
	if v, ok := ru.mutation.RatingMethod(); ok {
		if err := rate.RatingMethodValidator(v); err != nil {
			return &ValidationError{Name: "rating_method", err: fmt.Errorf(`ent: validator failed for field "Rate.rating_method": %w`, err)}
		}
	}
	if v, ok := ru.mutation.RateAmount(); ok {
		if err := rate.RateAmountValidator(v); err != nil {
			return &ValidationError{Name: "rate_amount", err: fmt.Errorf(`ent: validator failed for field "Rate.rate_amount": %w`, err)}
		}
	}
	if _, ok := ru.mutation.BusinessUnitID(); ru.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Rate.business_unit"`)
	}
	if _, ok := ru.mutation.OrganizationID(); ru.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Rate.organization"`)
	}
	if _, ok := ru.mutation.CustomerID(); ru.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Rate.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *RateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RateUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *RateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rate.Table, rate.Columns, sqlgraph.NewFieldSpec(rate.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(rate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Version(); ok {
		_spec.SetField(rate.FieldVersion, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedVersion(); ok {
		_spec.AddField(rate.FieldVersion, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(rate.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.EffectiveDate(); ok {
		_spec.SetField(rate.FieldEffectiveDate, field.TypeOther, value)
	}
	if ru.mutation.EffectiveDateCleared() {
		_spec.ClearField(rate.FieldEffectiveDate, field.TypeOther)
	}
	if value, ok := ru.mutation.ExpirationDate(); ok {
		_spec.SetField(rate.FieldExpirationDate, field.TypeOther, value)
	}
	if ru.mutation.ExpirationDateCleared() {
		_spec.ClearField(rate.FieldExpirationDate, field.TypeOther)
	}
	if value, ok := ru.mutation.RatingMethod(); ok {
		_spec.SetField(rate.FieldRatingMethod, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.RateAmount(); ok {
		_spec.SetField(rate.FieldRateAmount, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedRateAmount(); ok {
		_spec.AddField(rate.FieldRateAmount, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.Comment(); ok {
		_spec.SetField(rate.FieldComment, field.TypeString, value)
	}
	if ru.mutation.CommentCleared() {
		_spec.ClearField(rate.FieldComment, field.TypeString)
	}
	if value, ok := ru.mutation.ApprovedDate(); ok {
		_spec.SetField(rate.FieldApprovedDate, field.TypeOther, value)
	}
	if ru.mutation.ApprovedDateCleared() {
		_spec.ClearField(rate.FieldApprovedDate, field.TypeOther)
	}
	if value, ok := ru.mutation.UsageCount(); ok {
		_spec.SetField(rate.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedUsageCount(); ok {
		_spec.AddField(rate.FieldUsageCount, field.TypeInt, value)
	}
	if ru.mutation.UsageCountCleared() {
		_spec.ClearField(rate.FieldUsageCount, field.TypeInt)
	}
	if value, ok := ru.mutation.MinimumCharge(); ok {
		_spec.SetField(rate.FieldMinimumCharge, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedMinimumCharge(); ok {
		_spec.AddField(rate.FieldMinimumCharge, field.TypeFloat64, value)
	}
	if ru.mutation.MinimumChargeCleared() {
		_spec.ClearField(rate.FieldMinimumCharge, field.TypeFloat64)
	}
	if value, ok := ru.mutation.MaximumCharge(); ok {
		_spec.SetField(rate.FieldMaximumCharge, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedMaximumCharge(); ok {
		_spec.AddField(rate.FieldMaximumCharge, field.TypeFloat64, value)
	}
	if ru.mutation.MaximumChargeCleared() {
		_spec.ClearField(rate.FieldMaximumCharge, field.TypeFloat64)
	}
	if ru.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rate.OrganizationTable,
			Columns: []string{rate.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rate.OrganizationTable,
			Columns: []string{rate.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.CustomerTable,
			Columns: []string{rate.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.CustomerTable,
			Columns: []string{rate.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CommodityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.CommodityTable,
			Columns: []string{rate.CommodityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CommodityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.CommodityTable,
			Columns: []string{rate.CommodityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ShipmentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.ShipmentTypeTable,
			Columns: []string{rate.ShipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ShipmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.ShipmentTypeTable,
			Columns: []string{rate.ShipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.OriginLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.OriginLocationTable,
			Columns: []string{rate.OriginLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OriginLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.OriginLocationTable,
			Columns: []string{rate.OriginLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.DestinationLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.DestinationLocationTable,
			Columns: []string{rate.DestinationLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.DestinationLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.DestinationLocationTable,
			Columns: []string{rate.DestinationLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ApprovedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.ApprovedByTable,
			Columns: []string{rate.ApprovedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ApprovedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.ApprovedByTable,
			Columns: []string{rate.ApprovedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RateUpdateOne is the builder for updating a single Rate entity.
type RateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOrganizationID sets the "organization_id" field.
func (ruo *RateUpdateOne) SetOrganizationID(u uuid.UUID) *RateUpdateOne {
	ruo.mutation.SetOrganizationID(u)
	return ruo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableOrganizationID(u *uuid.UUID) *RateUpdateOne {
	if u != nil {
		ruo.SetOrganizationID(*u)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RateUpdateOne) SetUpdatedAt(t time.Time) *RateUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetVersion sets the "version" field.
func (ruo *RateUpdateOne) SetVersion(i int) *RateUpdateOne {
	ruo.mutation.ResetVersion()
	ruo.mutation.SetVersion(i)
	return ruo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableVersion(i *int) *RateUpdateOne {
	if i != nil {
		ruo.SetVersion(*i)
	}
	return ruo
}

// AddVersion adds i to the "version" field.
func (ruo *RateUpdateOne) AddVersion(i int) *RateUpdateOne {
	ruo.mutation.AddVersion(i)
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RateUpdateOne) SetStatus(r rate.Status) *RateUpdateOne {
	ruo.mutation.SetStatus(r)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableStatus(r *rate.Status) *RateUpdateOne {
	if r != nil {
		ruo.SetStatus(*r)
	}
	return ruo
}

// SetCustomerID sets the "customer_id" field.
func (ruo *RateUpdateOne) SetCustomerID(u uuid.UUID) *RateUpdateOne {
	ruo.mutation.SetCustomerID(u)
	return ruo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableCustomerID(u *uuid.UUID) *RateUpdateOne {
	if u != nil {
		ruo.SetCustomerID(*u)
	}
	return ruo
}

// SetEffectiveDate sets the "effective_date" field.
func (ruo *RateUpdateOne) SetEffectiveDate(pg *pgtype.Date) *RateUpdateOne {
	ruo.mutation.SetEffectiveDate(pg)
	return ruo
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (ruo *RateUpdateOne) ClearEffectiveDate() *RateUpdateOne {
	ruo.mutation.ClearEffectiveDate()
	return ruo
}

// SetExpirationDate sets the "expiration_date" field.
func (ruo *RateUpdateOne) SetExpirationDate(pg *pgtype.Date) *RateUpdateOne {
	ruo.mutation.SetExpirationDate(pg)
	return ruo
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (ruo *RateUpdateOne) ClearExpirationDate() *RateUpdateOne {
	ruo.mutation.ClearExpirationDate()
	return ruo
}

// SetCommodityID sets the "commodity_id" field.
func (ruo *RateUpdateOne) SetCommodityID(u uuid.UUID) *RateUpdateOne {
	ruo.mutation.SetCommodityID(u)
	return ruo
}

// SetNillableCommodityID sets the "commodity_id" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableCommodityID(u *uuid.UUID) *RateUpdateOne {
	if u != nil {
		ruo.SetCommodityID(*u)
	}
	return ruo
}

// ClearCommodityID clears the value of the "commodity_id" field.
func (ruo *RateUpdateOne) ClearCommodityID() *RateUpdateOne {
	ruo.mutation.ClearCommodityID()
	return ruo
}

// SetShipmentTypeID sets the "shipment_type_id" field.
func (ruo *RateUpdateOne) SetShipmentTypeID(u uuid.UUID) *RateUpdateOne {
	ruo.mutation.SetShipmentTypeID(u)
	return ruo
}

// SetNillableShipmentTypeID sets the "shipment_type_id" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableShipmentTypeID(u *uuid.UUID) *RateUpdateOne {
	if u != nil {
		ruo.SetShipmentTypeID(*u)
	}
	return ruo
}

// ClearShipmentTypeID clears the value of the "shipment_type_id" field.
func (ruo *RateUpdateOne) ClearShipmentTypeID() *RateUpdateOne {
	ruo.mutation.ClearShipmentTypeID()
	return ruo
}

// SetOriginLocationID sets the "origin_location_id" field.
func (ruo *RateUpdateOne) SetOriginLocationID(u uuid.UUID) *RateUpdateOne {
	ruo.mutation.SetOriginLocationID(u)
	return ruo
}

// SetNillableOriginLocationID sets the "origin_location_id" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableOriginLocationID(u *uuid.UUID) *RateUpdateOne {
	if u != nil {
		ruo.SetOriginLocationID(*u)
	}
	return ruo
}

// ClearOriginLocationID clears the value of the "origin_location_id" field.
func (ruo *RateUpdateOne) ClearOriginLocationID() *RateUpdateOne {
	ruo.mutation.ClearOriginLocationID()
	return ruo
}

// SetDestinationLocationID sets the "destination_location_id" field.
func (ruo *RateUpdateOne) SetDestinationLocationID(u uuid.UUID) *RateUpdateOne {
	ruo.mutation.SetDestinationLocationID(u)
	return ruo
}

// SetNillableDestinationLocationID sets the "destination_location_id" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableDestinationLocationID(u *uuid.UUID) *RateUpdateOne {
	if u != nil {
		ruo.SetDestinationLocationID(*u)
	}
	return ruo
}

// ClearDestinationLocationID clears the value of the "destination_location_id" field.
func (ruo *RateUpdateOne) ClearDestinationLocationID() *RateUpdateOne {
	ruo.mutation.ClearDestinationLocationID()
	return ruo
}

// SetRatingMethod sets the "rating_method" field.
func (ruo *RateUpdateOne) SetRatingMethod(rm rate.RatingMethod) *RateUpdateOne {
	ruo.mutation.SetRatingMethod(rm)
	return ruo
}

// SetNillableRatingMethod sets the "rating_method" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableRatingMethod(rm *rate.RatingMethod) *RateUpdateOne {
	if rm != nil {
		ruo.SetRatingMethod(*rm)
	}
	return ruo
}

// SetRateAmount sets the "rate_amount" field.
func (ruo *RateUpdateOne) SetRateAmount(f float64) *RateUpdateOne {
	ruo.mutation.ResetRateAmount()
	ruo.mutation.SetRateAmount(f)
	return ruo
}

// SetNillableRateAmount sets the "rate_amount" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableRateAmount(f *float64) *RateUpdateOne {
	if f != nil {
		ruo.SetRateAmount(*f)
	}
	return ruo
}

// AddRateAmount adds f to the "rate_amount" field.
func (ruo *RateUpdateOne) AddRateAmount(f float64) *RateUpdateOne {
	ruo.mutation.AddRateAmount(f)
	return ruo
}

// SetComment sets the "comment" field.
func (ruo *RateUpdateOne) SetComment(s string) *RateUpdateOne {
	ruo.mutation.SetComment(s)
	return ruo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableComment(s *string) *RateUpdateOne {
	if s != nil {
		ruo.SetComment(*s)
	}
	return ruo
}

// ClearComment clears the value of the "comment" field.
func (ruo *RateUpdateOne) ClearComment() *RateUpdateOne {
	ruo.mutation.ClearComment()
	return ruo
}

// SetApprovedByID sets the "approved_by_id" field.
func (ruo *RateUpdateOne) SetApprovedByID(u uuid.UUID) *RateUpdateOne {
	ruo.mutation.SetApprovedByID(u)
	return ruo
}

// SetNillableApprovedByID sets the "approved_by_id" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableApprovedByID(u *uuid.UUID) *RateUpdateOne {
	if u != nil {
		ruo.SetApprovedByID(*u)
	}
	return ruo
}

// ClearApprovedByID clears the value of the "approved_by_id" field.
func (ruo *RateUpdateOne) ClearApprovedByID() *RateUpdateOne {
	ruo.mutation.ClearApprovedByID()
	return ruo
}

// SetApprovedDate sets the "approved_date" field.
func (ruo *RateUpdateOne) SetApprovedDate(pg *pgtype.Date) *RateUpdateOne {
	ruo.mutation.SetApprovedDate(pg)
	return ruo
}

// ClearApprovedDate clears the value of the "approved_date" field.
func (ruo *RateUpdateOne) ClearApprovedDate() *RateUpdateOne {
	ruo.mutation.ClearApprovedDate()
	return ruo
}

// SetUsageCount sets the "usage_count" field.
func (ruo *RateUpdateOne) SetUsageCount(i int) *RateUpdateOne {
	ruo.mutation.ResetUsageCount()
	ruo.mutation.SetUsageCount(i)
	return ruo
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableUsageCount(i *int) *RateUpdateOne {
	if i != nil {
		ruo.SetUsageCount(*i)
	}
	return ruo
}

// AddUsageCount adds i to the "usage_count" field.
func (ruo *RateUpdateOne) AddUsageCount(i int) *RateUpdateOne {
	ruo.mutation.AddUsageCount(i)
	return ruo
}

// ClearUsageCount clears the value of the "usage_count" field.
func (ruo *RateUpdateOne) ClearUsageCount() *RateUpdateOne {
	ruo.mutation.ClearUsageCount()
	return ruo
}

// SetMinimumCharge sets the "minimum_charge" field.
func (ruo *RateUpdateOne) SetMinimumCharge(f float64) *RateUpdateOne {
	ruo.mutation.ResetMinimumCharge()
	ruo.mutation.SetMinimumCharge(f)
	return ruo
}

// SetNillableMinimumCharge sets the "minimum_charge" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableMinimumCharge(f *float64) *RateUpdateOne {
	if f != nil {
		ruo.SetMinimumCharge(*f)
	}
	return ruo
}

// AddMinimumCharge adds f to the "minimum_charge" field.
func (ruo *RateUpdateOne) AddMinimumCharge(f float64) *RateUpdateOne {
	ruo.mutation.AddMinimumCharge(f)
	return ruo
}

// ClearMinimumCharge clears the value of the "minimum_charge" field.
func (ruo *RateUpdateOne) ClearMinimumCharge() *RateUpdateOne {
	ruo.mutation.ClearMinimumCharge()
	return ruo
}

// SetMaximumCharge sets the "maximum_charge" field.
func (ruo *RateUpdateOne) SetMaximumCharge(f float64) *RateUpdateOne {
	ruo.mutation.ResetMaximumCharge()
	ruo.mutation.SetMaximumCharge(f)
	return ruo
}

// SetNillableMaximumCharge sets the "maximum_charge" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableMaximumCharge(f *float64) *RateUpdateOne {
	if f != nil {
		ruo.SetMaximumCharge(*f)
	}
	return ruo
}

// AddMaximumCharge adds f to the "maximum_charge" field.
func (ruo *RateUpdateOne) AddMaximumCharge(f float64) *RateUpdateOne {
	ruo.mutation.AddMaximumCharge(f)
	return ruo
}

// ClearMaximumCharge clears the value of the "maximum_charge" field.
func (ruo *RateUpdateOne) ClearMaximumCharge() *RateUpdateOne {
	ruo.mutation.ClearMaximumCharge()
	return ruo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ruo *RateUpdateOne) SetOrganization(o *Organization) *RateUpdateOne {
	return ruo.SetOrganizationID(o.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ruo *RateUpdateOne) SetCustomer(c *Customer) *RateUpdateOne {
	return ruo.SetCustomerID(c.ID)
}

// SetCommodity sets the "commodity" edge to the Commodity entity.
func (ruo *RateUpdateOne) SetCommodity(c *Commodity) *RateUpdateOne {
	return ruo.SetCommodityID(c.ID)
}

// SetShipmentType sets the "shipment_type" edge to the ShipmentType entity.
func (ruo *RateUpdateOne) SetShipmentType(s *ShipmentType) *RateUpdateOne {
	return ruo.SetShipmentTypeID(s.ID)
}

// SetOriginLocation sets the "origin_location" edge to the Location entity.
func (ruo *RateUpdateOne) SetOriginLocation(l *Location) *RateUpdateOne {
	return ruo.SetOriginLocationID(l.ID)
}

// SetDestinationLocation sets the "destination_location" edge to the Location entity.
func (ruo *RateUpdateOne) SetDestinationLocation(l *Location) *RateUpdateOne {
	return ruo.SetDestinationLocationID(l.ID)
}

// SetApprovedBy sets the "approved_by" edge to the User entity.
func (ruo *RateUpdateOne) SetApprovedBy(u *User) *RateUpdateOne {
	return ruo.SetApprovedByID(u.ID)
}

// Mutation returns the RateMutation object of the builder.
func (ruo *RateUpdateOne) Mutation() *RateMutation {
	return ruo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ruo *RateUpdateOne) ClearOrganization() *RateUpdateOne {
	ruo.mutation.ClearOrganization()
	return ruo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (ruo *RateUpdateOne) ClearCustomer() *RateUpdateOne {
	ruo.mutation.ClearCustomer()
	return ruo
}

// ClearCommodity clears the "commodity" edge to the Commodity entity.
func (ruo *RateUpdateOne) ClearCommodity() *RateUpdateOne {
	ruo.mutation.ClearCommodity()
	return ruo
}

// ClearShipmentType clears the "shipment_type" edge to the ShipmentType entity.
func (ruo *RateUpdateOne) ClearShipmentType() *RateUpdateOne {
	ruo.mutation.ClearShipmentType()
	return ruo
}

// ClearOriginLocation clears the "origin_location" edge to the Location entity.
func (ruo *RateUpdateOne) ClearOriginLocation() *RateUpdateOne {
	ruo.mutation.ClearOriginLocation()
	return ruo
}

// ClearDestinationLocation clears the "destination_location" edge to the Location entity.
func (ruo *RateUpdateOne) ClearDestinationLocation() *RateUpdateOne {
	ruo.mutation.ClearDestinationLocation()
	return ruo
}

// ClearApprovedBy clears the "approved_by" edge to the User entity.
func (ruo *RateUpdateOne) ClearApprovedBy() *RateUpdateOne {
	ruo.mutation.ClearApprovedBy()
	return ruo
}

// Where appends a list predicates to the RateUpdate builder.
func (ruo *RateUpdateOne) Where(ps ...predicate.Rate) *RateUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RateUpdateOne) Select(field string, fields ...string) *RateUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Rate entity.
func (ruo *RateUpdateOne) Save(ctx context.Context) (*Rate, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RateUpdateOne) SaveX(ctx context.Context) *Rate {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RateUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RateUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RateUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := rate.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RateUpdateOne) check() error {
	if v, ok := ruo.mutation.Status(); ok {
		if err := rate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Rate.status": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.RatingMethod(); ok {
		if err := rate.RatingMethodValidator(v); err != nil {
			return &ValidationError{Name: "rating_method", err: fmt.Errorf(`ent: validator failed for field "Rate.rating_method": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.RateAmount(); ok {
		if err := rate.RateAmountValidator(v); err != nil {
			return &ValidationError{Name: "rate_amount", err: fmt.Errorf(`ent: validator failed for field "Rate.rate_amount": %w`, err)}
		}
	}
	if _, ok := ruo.mutation.BusinessUnitID(); ruo.mutation.BusinessUnitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Rate.business_unit"`)
	}
	if _, ok := ruo.mutation.OrganizationID(); ruo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Rate.organization"`)
	}
	if _, ok := ruo.mutation.CustomerID(); ruo.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Rate.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *RateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RateUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *RateUpdateOne) sqlSave(ctx context.Context) (_node *Rate, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rate.Table, rate.Columns, sqlgraph.NewFieldSpec(rate.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rate.FieldID)
		for _, f := range fields {
			if !rate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(rate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Version(); ok {
		_spec.SetField(rate.FieldVersion, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedVersion(); ok {
		_spec.AddField(rate.FieldVersion, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(rate.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.EffectiveDate(); ok {
		_spec.SetField(rate.FieldEffectiveDate, field.TypeOther, value)
	}
	if ruo.mutation.EffectiveDateCleared() {
		_spec.ClearField(rate.FieldEffectiveDate, field.TypeOther)
	}
	if value, ok := ruo.mutation.ExpirationDate(); ok {
		_spec.SetField(rate.FieldExpirationDate, field.TypeOther, value)
	}
	if ruo.mutation.ExpirationDateCleared() {
		_spec.ClearField(rate.FieldExpirationDate, field.TypeOther)
	}
	if value, ok := ruo.mutation.RatingMethod(); ok {
		_spec.SetField(rate.FieldRatingMethod, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.RateAmount(); ok {
		_spec.SetField(rate.FieldRateAmount, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedRateAmount(); ok {
		_spec.AddField(rate.FieldRateAmount, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.Comment(); ok {
		_spec.SetField(rate.FieldComment, field.TypeString, value)
	}
	if ruo.mutation.CommentCleared() {
		_spec.ClearField(rate.FieldComment, field.TypeString)
	}
	if value, ok := ruo.mutation.ApprovedDate(); ok {
		_spec.SetField(rate.FieldApprovedDate, field.TypeOther, value)
	}
	if ruo.mutation.ApprovedDateCleared() {
		_spec.ClearField(rate.FieldApprovedDate, field.TypeOther)
	}
	if value, ok := ruo.mutation.UsageCount(); ok {
		_spec.SetField(rate.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedUsageCount(); ok {
		_spec.AddField(rate.FieldUsageCount, field.TypeInt, value)
	}
	if ruo.mutation.UsageCountCleared() {
		_spec.ClearField(rate.FieldUsageCount, field.TypeInt)
	}
	if value, ok := ruo.mutation.MinimumCharge(); ok {
		_spec.SetField(rate.FieldMinimumCharge, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedMinimumCharge(); ok {
		_spec.AddField(rate.FieldMinimumCharge, field.TypeFloat64, value)
	}
	if ruo.mutation.MinimumChargeCleared() {
		_spec.ClearField(rate.FieldMinimumCharge, field.TypeFloat64)
	}
	if value, ok := ruo.mutation.MaximumCharge(); ok {
		_spec.SetField(rate.FieldMaximumCharge, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedMaximumCharge(); ok {
		_spec.AddField(rate.FieldMaximumCharge, field.TypeFloat64, value)
	}
	if ruo.mutation.MaximumChargeCleared() {
		_spec.ClearField(rate.FieldMaximumCharge, field.TypeFloat64)
	}
	if ruo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rate.OrganizationTable,
			Columns: []string{rate.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rate.OrganizationTable,
			Columns: []string{rate.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.CustomerTable,
			Columns: []string{rate.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.CustomerTable,
			Columns: []string{rate.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CommodityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.CommodityTable,
			Columns: []string{rate.CommodityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CommodityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.CommodityTable,
			Columns: []string{rate.CommodityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commodity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ShipmentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.ShipmentTypeTable,
			Columns: []string{rate.ShipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ShipmentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.ShipmentTypeTable,
			Columns: []string{rate.ShipmentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.OriginLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.OriginLocationTable,
			Columns: []string{rate.OriginLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OriginLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.OriginLocationTable,
			Columns: []string{rate.OriginLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.DestinationLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.DestinationLocationTable,
			Columns: []string{rate.DestinationLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.DestinationLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.DestinationLocationTable,
			Columns: []string{rate.DestinationLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ApprovedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.ApprovedByTable,
			Columns: []string{rate.ApprovedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ApprovedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.ApprovedByTable,
			Columns: []string{rate.ApprovedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Rate{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
