// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/emoss08/trenova/internal/ent/businessunit"
	"github.com/emoss08/trenova/internal/ent/commodity"
	"github.com/emoss08/trenova/internal/ent/customer"
	"github.com/emoss08/trenova/internal/ent/location"
	"github.com/emoss08/trenova/internal/ent/organization"
	"github.com/emoss08/trenova/internal/ent/rate"
	"github.com/emoss08/trenova/internal/ent/shipmenttype"
	"github.com/emoss08/trenova/internal/ent/user"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// Rate is the model entity for the Rate schema.
type Rate struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BusinessUnitID holds the value of the "business_unit_id" field.
	BusinessUnitID uuid.UUID `json:"businessUnitId"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organizationId"`
	// The time that this entity was created.
	CreatedAt time.Time `json:"createdAt" validate:"omitempty"`
	// The last time that this entity was updated.
	UpdatedAt time.Time `json:"updatedAt" validate:"omitempty"`
	// The current version of this entity.
	Version int `json:"version" validate:"omitempty"`
	// Status holds the value of the "status" field.
	Status rate.Status `json:"status" validate:"required,oneof=A I"`
	// RateNumber holds the value of the "rate_number" field.
	RateNumber string `json:"rate_number" validate:"omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID uuid.UUID `json:"customerId" validate:"required"`
	// EffectiveDate holds the value of the "effective_date" field.
	EffectiveDate *pgtype.Date `json:"effectiveDate"`
	// ExpirationDate holds the value of the "expiration_date" field.
	ExpirationDate *pgtype.Date `json:"expirationDate"`
	// CommodityID holds the value of the "commodity_id" field.
	CommodityID *uuid.UUID `json:"commodityId" validate:"omitempty"`
	// ShipmentTypeID holds the value of the "shipment_type_id" field.
	ShipmentTypeID *uuid.UUID `json:"shipmentTypeId" validate:"omitempty"`
	// OriginLocationID holds the value of the "origin_location_id" field.
	OriginLocationID *uuid.UUID `json:"originLocationId" validate:"omitempty"`
	// DestinationLocationID holds the value of the "destination_location_id" field.
	DestinationLocationID *uuid.UUID `json:"destinationLocationId" validate:"omitempty"`
	// RatingMethod holds the value of the "rating_method" field.
	RatingMethod rate.RatingMethod `json:"ratingMethod" validate:"omitempty"`
	// RateAmount holds the value of the "rate_amount" field.
	RateAmount float64 `json:"rateAmount" validate:"required"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment" validate:"omitempty"`
	// ApprovedByID holds the value of the "approved_by_id" field.
	ApprovedByID *uuid.UUID `json:"approvedBy" validate:"omitempty"`
	// ApprovedDate holds the value of the "approved_date" field.
	ApprovedDate *pgtype.Date `json:"approvedDate"`
	// UsageCount holds the value of the "usage_count" field.
	UsageCount int `json:"usageCount" validate:"omitempty"`
	// MinimumCharge holds the value of the "minimum_charge" field.
	MinimumCharge *float64 `json:"minimumCharge" validate:"omitempty"`
	// MaximumCharge holds the value of the "maximum_charge" field.
	MaximumCharge *float64 `json:"maximumCharge" validate:"omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RateQuery when eager-loading is set.
	Edges        RateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RateEdges holds the relations/edges for other nodes in the graph.
type RateEdges struct {
	// BusinessUnit holds the value of the business_unit edge.
	BusinessUnit *BusinessUnit `json:"business_unit,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// Commodity holds the value of the commodity edge.
	Commodity *Commodity `json:"commodity,omitempty"`
	// ShipmentType holds the value of the shipment_type edge.
	ShipmentType *ShipmentType `json:"shipment_type,omitempty"`
	// OriginLocation holds the value of the origin_location edge.
	OriginLocation *Location `json:"origin_location,omitempty"`
	// DestinationLocation holds the value of the destination_location edge.
	DestinationLocation *Location `json:"destination_location,omitempty"`
	// ApprovedBy holds the value of the approved_by edge.
	ApprovedBy *User `json:"approved_by,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// BusinessUnitOrErr returns the BusinessUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RateEdges) BusinessUnitOrErr() (*BusinessUnit, error) {
	if e.BusinessUnit != nil {
		return e.BusinessUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: businessunit.Label}
	}
	return nil, &NotLoadedError{edge: "business_unit"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RateEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RateEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// CommodityOrErr returns the Commodity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RateEdges) CommodityOrErr() (*Commodity, error) {
	if e.Commodity != nil {
		return e.Commodity, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: commodity.Label}
	}
	return nil, &NotLoadedError{edge: "commodity"}
}

// ShipmentTypeOrErr returns the ShipmentType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RateEdges) ShipmentTypeOrErr() (*ShipmentType, error) {
	if e.ShipmentType != nil {
		return e.ShipmentType, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: shipmenttype.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_type"}
}

// OriginLocationOrErr returns the OriginLocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RateEdges) OriginLocationOrErr() (*Location, error) {
	if e.OriginLocation != nil {
		return e.OriginLocation, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: location.Label}
	}
	return nil, &NotLoadedError{edge: "origin_location"}
}

// DestinationLocationOrErr returns the DestinationLocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RateEdges) DestinationLocationOrErr() (*Location, error) {
	if e.DestinationLocation != nil {
		return e.DestinationLocation, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: location.Label}
	}
	return nil, &NotLoadedError{edge: "destination_location"}
}

// ApprovedByOrErr returns the ApprovedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RateEdges) ApprovedByOrErr() (*User, error) {
	if e.ApprovedBy != nil {
		return e.ApprovedBy, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "approved_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rate.FieldEffectiveDate, rate.FieldExpirationDate, rate.FieldApprovedDate:
			values[i] = &sql.NullScanner{S: new(pgtype.Date)}
		case rate.FieldCommodityID, rate.FieldShipmentTypeID, rate.FieldOriginLocationID, rate.FieldDestinationLocationID, rate.FieldApprovedByID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case rate.FieldRateAmount, rate.FieldMinimumCharge, rate.FieldMaximumCharge:
			values[i] = new(sql.NullFloat64)
		case rate.FieldVersion, rate.FieldUsageCount:
			values[i] = new(sql.NullInt64)
		case rate.FieldStatus, rate.FieldRateNumber, rate.FieldRatingMethod, rate.FieldComment:
			values[i] = new(sql.NullString)
		case rate.FieldCreatedAt, rate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case rate.FieldID, rate.FieldBusinessUnitID, rate.FieldOrganizationID, rate.FieldCustomerID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rate fields.
func (r *Rate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case rate.FieldBusinessUnitID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field business_unit_id", values[i])
			} else if value != nil {
				r.BusinessUnitID = *value
			}
		case rate.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				r.OrganizationID = *value
			}
		case rate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case rate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case rate.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				r.Version = int(value.Int64)
			}
		case rate.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = rate.Status(value.String)
			}
		case rate.FieldRateNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rate_number", values[i])
			} else if value.Valid {
				r.RateNumber = value.String
			}
		case rate.FieldCustomerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value != nil {
				r.CustomerID = *value
			}
		case rate.FieldEffectiveDate:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field effective_date", values[i])
			} else if value.Valid {
				r.EffectiveDate = value.S.(*pgtype.Date)
			}
		case rate.FieldExpirationDate:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field expiration_date", values[i])
			} else if value.Valid {
				r.ExpirationDate = value.S.(*pgtype.Date)
			}
		case rate.FieldCommodityID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field commodity_id", values[i])
			} else if value.Valid {
				r.CommodityID = new(uuid.UUID)
				*r.CommodityID = *value.S.(*uuid.UUID)
			}
		case rate.FieldShipmentTypeID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_type_id", values[i])
			} else if value.Valid {
				r.ShipmentTypeID = new(uuid.UUID)
				*r.ShipmentTypeID = *value.S.(*uuid.UUID)
			}
		case rate.FieldOriginLocationID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field origin_location_id", values[i])
			} else if value.Valid {
				r.OriginLocationID = new(uuid.UUID)
				*r.OriginLocationID = *value.S.(*uuid.UUID)
			}
		case rate.FieldDestinationLocationID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field destination_location_id", values[i])
			} else if value.Valid {
				r.DestinationLocationID = new(uuid.UUID)
				*r.DestinationLocationID = *value.S.(*uuid.UUID)
			}
		case rate.FieldRatingMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rating_method", values[i])
			} else if value.Valid {
				r.RatingMethod = rate.RatingMethod(value.String)
			}
		case rate.FieldRateAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rate_amount", values[i])
			} else if value.Valid {
				r.RateAmount = value.Float64
			}
		case rate.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				r.Comment = value.String
			}
		case rate.FieldApprovedByID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field approved_by_id", values[i])
			} else if value.Valid {
				r.ApprovedByID = new(uuid.UUID)
				*r.ApprovedByID = *value.S.(*uuid.UUID)
			}
		case rate.FieldApprovedDate:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field approved_date", values[i])
			} else if value.Valid {
				r.ApprovedDate = value.S.(*pgtype.Date)
			}
		case rate.FieldUsageCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_count", values[i])
			} else if value.Valid {
				r.UsageCount = int(value.Int64)
			}
		case rate.FieldMinimumCharge:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field minimum_charge", values[i])
			} else if value.Valid {
				r.MinimumCharge = new(float64)
				*r.MinimumCharge = value.Float64
			}
		case rate.FieldMaximumCharge:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maximum_charge", values[i])
			} else if value.Valid {
				r.MaximumCharge = new(float64)
				*r.MaximumCharge = value.Float64
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Rate.
// This includes values selected through modifiers, order, etc.
func (r *Rate) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryBusinessUnit queries the "business_unit" edge of the Rate entity.
func (r *Rate) QueryBusinessUnit() *BusinessUnitQuery {
	return NewRateClient(r.config).QueryBusinessUnit(r)
}

// QueryOrganization queries the "organization" edge of the Rate entity.
func (r *Rate) QueryOrganization() *OrganizationQuery {
	return NewRateClient(r.config).QueryOrganization(r)
}

// QueryCustomer queries the "customer" edge of the Rate entity.
func (r *Rate) QueryCustomer() *CustomerQuery {
	return NewRateClient(r.config).QueryCustomer(r)
}

// QueryCommodity queries the "commodity" edge of the Rate entity.
func (r *Rate) QueryCommodity() *CommodityQuery {
	return NewRateClient(r.config).QueryCommodity(r)
}

// QueryShipmentType queries the "shipment_type" edge of the Rate entity.
func (r *Rate) QueryShipmentType() *ShipmentTypeQuery {
	return NewRateClient(r.config).QueryShipmentType(r)
}

// QueryOriginLocation queries the "origin_location" edge of the Rate entity.
func (r *Rate) QueryOriginLocation() *LocationQuery {
	return NewRateClient(r.config).QueryOriginLocation(r)
}

// QueryDestinationLocation queries the "destination_location" edge of the Rate entity.
func (r *Rate) QueryDestinationLocation() *LocationQuery {
	return NewRateClient(r.config).QueryDestinationLocation(r)
}

// QueryApprovedBy queries the "approved_by" edge of the Rate entity.
func (r *Rate) QueryApprovedBy() *UserQuery {
	return NewRateClient(r.config).QueryApprovedBy(r)
}

// Update returns a builder for updating this Rate.
// Note that you need to call Rate.Unwrap() before calling this method if this Rate
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rate) Update() *RateUpdateOne {
	return NewRateClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Rate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rate) Unwrap() *Rate {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rate is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rate) String() string {
	var builder strings.Builder
	builder.WriteString("Rate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("business_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", r.BusinessUnitID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", r.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", r.Version))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", ")
	builder.WriteString("rate_number=")
	builder.WriteString(r.RateNumber)
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", r.CustomerID))
	builder.WriteString(", ")
	if v := r.EffectiveDate; v != nil {
		builder.WriteString("effective_date=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := r.ExpirationDate; v != nil {
		builder.WriteString("expiration_date=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := r.CommodityID; v != nil {
		builder.WriteString("commodity_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := r.ShipmentTypeID; v != nil {
		builder.WriteString("shipment_type_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := r.OriginLocationID; v != nil {
		builder.WriteString("origin_location_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := r.DestinationLocationID; v != nil {
		builder.WriteString("destination_location_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("rating_method=")
	builder.WriteString(fmt.Sprintf("%v", r.RatingMethod))
	builder.WriteString(", ")
	builder.WriteString("rate_amount=")
	builder.WriteString(fmt.Sprintf("%v", r.RateAmount))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(r.Comment)
	builder.WriteString(", ")
	if v := r.ApprovedByID; v != nil {
		builder.WriteString("approved_by_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := r.ApprovedDate; v != nil {
		builder.WriteString("approved_date=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("usage_count=")
	builder.WriteString(fmt.Sprintf("%v", r.UsageCount))
	builder.WriteString(", ")
	if v := r.MinimumCharge; v != nil {
		builder.WriteString("minimum_charge=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := r.MaximumCharge; v != nil {
		builder.WriteString("maximum_charge=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Rates is a parsable slice of Rate.
type Rates []*Rate
