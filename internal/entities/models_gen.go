// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package entities

import (
	"fmt"
	"io"
	"strconv"

	"github.com/emoss08/trenova/pkg/types/pulid"
)

type BusinessUnit struct {
	ID             pulid.ID  `json:"id"`
	Name           string    `json:"name"`
	Code           string    `json:"code"`
	Description    string    `json:"description"`
	PrimaryContact *string   `json:"primaryContact,omitempty"`
	PrimaryEmail   *string   `json:"primaryEmail,omitempty"`
	PrimaryPhone   *string   `json:"primaryPhone,omitempty"`
	AddressLine1   *string   `json:"addressLine1,omitempty"`
	AddressLine2   *string   `json:"addressLine2,omitempty"`
	City           *string   `json:"city,omitempty"`
	PostalCode     *string   `json:"postalCode,omitempty"`
	Timezone       string    `json:"timezone"`
	Locale         string    `json:"locale"`
	TaxID          *string   `json:"taxId,omitempty"`
	StateID        *pulid.ID `json:"stateId,omitempty"`
	CreatedAt      int32     `json:"createdAt"`
	UpdatedAt      int32     `json:"updatedAt"`
}

type CreateOrganizationInput struct {
	Name           string           `json:"name"`
	ScacCode       string           `json:"scacCode"`
	DotNumber      string           `json:"dotNumber"`
	LogoURL        *string          `json:"logoURL,omitempty"`
	OrgType        OrganizationType `json:"orgType"`
	AddressLine1   string           `json:"addressLine1"`
	AddressLine2   *string          `json:"addressLine2,omitempty"`
	City           string           `json:"city"`
	PostalCode     string           `json:"postalCode"`
	Timezone       string           `json:"timezone"`
	TaxID          *string          `json:"taxId,omitempty"`
	PrimaryContact *string          `json:"primaryContact,omitempty"`
	PrimaryEmail   *string          `json:"primaryEmail,omitempty"`
	PrimaryPhone   *string          `json:"primaryPhone,omitempty"`
	BusinessUnitID pulid.ID         `json:"businessUnitId"`
	StateID        pulid.ID         `json:"stateId"`
}

type Mutation struct {
}

type Organization struct {
	ID             pulid.ID         `json:"id"`
	Name           string           `json:"name"`
	ScacCode       string           `json:"scacCode"`
	DotNumber      string           `json:"dotNumber"`
	LogoURL        string           `json:"logoURL"`
	OrgType        OrganizationType `json:"orgType"`
	BucketName     string           `json:"bucketName"`
	AddressLine1   string           `json:"addressLine1"`
	AddressLine2   string           `json:"addressLine2"`
	City           string           `json:"city"`
	PostalCode     string           `json:"postalCode"`
	Timezone       string           `json:"timezone"`
	TaxID          string           `json:"taxId"`
	PrimaryContact string           `json:"primaryContact"`
	PrimaryEmail   string           `json:"primaryEmail"`
	PrimaryPhone   string           `json:"primaryPhone"`
	BusinessUnit   *BusinessUnit    `json:"businessUnit"`
	State          *UsState         `json:"state"`
	CreatedAt      int32            `json:"createdAt"`
	UpdatedAt      int32            `json:"updatedAt"`
}

type Query struct {
}

type UsState struct {
	ID           pulid.ID `json:"id"`
	Name         string   `json:"name"`
	Abbreviation string   `json:"abbreviation"`
	CountryName  string   `json:"countryName"`
	CountryIso3  string   `json:"countryIso3"`
	CreatedAt    int32    `json:"createdAt"`
	UpdatedAt    int32    `json:"updatedAt"`
}

type OrganizationType string

const (
	OrganizationTypeBrokerage        OrganizationType = "Brokerage"
	OrganizationTypeCarrier          OrganizationType = "Carrier"
	OrganizationTypeBrokerageCarrier OrganizationType = "BrokerageCarrier"
)

var AllOrganizationType = []OrganizationType{
	OrganizationTypeBrokerage,
	OrganizationTypeCarrier,
	OrganizationTypeBrokerageCarrier,
}

func (e OrganizationType) IsValid() bool {
	switch e {
	case OrganizationTypeBrokerage, OrganizationTypeCarrier, OrganizationTypeBrokerageCarrier:
		return true
	}
	return false
}

func (e OrganizationType) String() string {
	return string(e)
}

func (e *OrganizationType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationType", str)
	}
	return nil
}

func (e OrganizationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
