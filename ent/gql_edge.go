// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (ac *AccountingControl) Organization(ctx context.Context) (*Organization, error) {
	result, err := ac.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = ac.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (ac *AccountingControl) BusinessUnit(ctx context.Context) (*BusinessUnit, error) {
	result, err := ac.Edges.BusinessUnitOrErr()
	if IsNotLoaded(err) {
		result, err = ac.QueryBusinessUnit().Only(ctx)
	}
	return result, err
}

func (ac *AccountingControl) DefaultRevAccount(ctx context.Context) (*GeneralLedgerAccount, error) {
	result, err := ac.Edges.DefaultRevAccountOrErr()
	if IsNotLoaded(err) {
		result, err = ac.QueryDefaultRevAccount().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ac *AccountingControl) DefaultExpAccount(ctx context.Context) (*GeneralLedgerAccount, error) {
	result, err := ac.Edges.DefaultExpAccountOrErr()
	if IsNotLoaded(err) {
		result, err = ac.QueryDefaultExpAccount().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (bc *BillingControl) Organization(ctx context.Context) (*Organization, error) {
	result, err := bc.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = bc.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (bc *BillingControl) BusinessUnit(ctx context.Context) (*BusinessUnit, error) {
	result, err := bc.Edges.BusinessUnitOrErr()
	if IsNotLoaded(err) {
		result, err = bc.QueryBusinessUnit().Only(ctx)
	}
	return result, err
}

func (bu *BusinessUnit) Prev(ctx context.Context) (*BusinessUnit, error) {
	result, err := bu.Edges.PrevOrErr()
	if IsNotLoaded(err) {
		result, err = bu.QueryPrev().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (bu *BusinessUnit) Next(ctx context.Context) (*BusinessUnit, error) {
	result, err := bu.Edges.NextOrErr()
	if IsNotLoaded(err) {
		result, err = bu.QueryNext().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (bu *BusinessUnit) Organizations(ctx context.Context) (result []*Organization, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = bu.NamedOrganizations(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = bu.Edges.OrganizationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = bu.QueryOrganizations().All(ctx)
	}
	return result, err
}

func (c *Commodity) BusinessUnit(ctx context.Context) (*BusinessUnit, error) {
	result, err := c.Edges.BusinessUnitOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryBusinessUnit().Only(ctx)
	}
	return result, err
}

func (c *Commodity) Organization(ctx context.Context) (*Organization, error) {
	result, err := c.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (c *Commodity) HazardousMaterial(ctx context.Context) (*HazardousMaterial, error) {
	result, err := c.Edges.HazardousMaterialOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryHazardousMaterial().Only(ctx)
	}
	return result, err
}

func (dc *DispatchControl) Organization(ctx context.Context) (*Organization, error) {
	result, err := dc.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = dc.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (dc *DispatchControl) BusinessUnit(ctx context.Context) (*BusinessUnit, error) {
	result, err := dc.Edges.BusinessUnitOrErr()
	if IsNotLoaded(err) {
		result, err = dc.QueryBusinessUnit().Only(ctx)
	}
	return result, err
}

func (ftc *FeasibilityToolControl) Organization(ctx context.Context) (*Organization, error) {
	result, err := ftc.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = ftc.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (ftc *FeasibilityToolControl) BusinessUnit(ctx context.Context) (*BusinessUnit, error) {
	result, err := ftc.Edges.BusinessUnitOrErr()
	if IsNotLoaded(err) {
		result, err = ftc.QueryBusinessUnit().Only(ctx)
	}
	return result, err
}

func (gla *GeneralLedgerAccount) BusinessUnit(ctx context.Context) (*BusinessUnit, error) {
	result, err := gla.Edges.BusinessUnitOrErr()
	if IsNotLoaded(err) {
		result, err = gla.QueryBusinessUnit().Only(ctx)
	}
	return result, err
}

func (gla *GeneralLedgerAccount) Organization(ctx context.Context) (*Organization, error) {
	result, err := gla.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = gla.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (gla *GeneralLedgerAccount) Tags(ctx context.Context) (result []*Tag, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gla.NamedTags(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gla.Edges.TagsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gla.QueryTags().All(ctx)
	}
	return result, err
}

func (hm *HazardousMaterial) BusinessUnit(ctx context.Context) (*BusinessUnit, error) {
	result, err := hm.Edges.BusinessUnitOrErr()
	if IsNotLoaded(err) {
		result, err = hm.QueryBusinessUnit().Only(ctx)
	}
	return result, err
}

func (hm *HazardousMaterial) Organization(ctx context.Context) (*Organization, error) {
	result, err := hm.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = hm.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (hm *HazardousMaterial) Commodities(ctx context.Context) (result []*Commodity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = hm.NamedCommodities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = hm.Edges.CommoditiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = hm.QueryCommodities().All(ctx)
	}
	return result, err
}

func (ic *InvoiceControl) Organization(ctx context.Context) (*Organization, error) {
	result, err := ic.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = ic.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (ic *InvoiceControl) BusinessUnit(ctx context.Context) (*BusinessUnit, error) {
	result, err := ic.Edges.BusinessUnitOrErr()
	if IsNotLoaded(err) {
		result, err = ic.QueryBusinessUnit().Only(ctx)
	}
	return result, err
}

func (o *Organization) BusinessUnit(ctx context.Context) (*BusinessUnit, error) {
	result, err := o.Edges.BusinessUnitOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryBusinessUnit().Only(ctx)
	}
	return result, err
}

func (o *Organization) AccountingControl(ctx context.Context) (*AccountingControl, error) {
	result, err := o.Edges.AccountingControlOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryAccountingControl().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) BillingControl(ctx context.Context) (*BillingControl, error) {
	result, err := o.Edges.BillingControlOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryBillingControl().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) DispatchControl(ctx context.Context) (*DispatchControl, error) {
	result, err := o.Edges.DispatchControlOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryDispatchControl().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) FeasibilityToolControl(ctx context.Context) (*FeasibilityToolControl, error) {
	result, err := o.Edges.FeasibilityToolControlOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryFeasibilityToolControl().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) InvoiceControl(ctx context.Context) (*InvoiceControl, error) {
	result, err := o.Edges.InvoiceControlOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryInvoiceControl().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) RouteControl(ctx context.Context) (*RouteControl, error) {
	result, err := o.Edges.RouteControlOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryRouteControl().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) ShipmentControl(ctx context.Context) (*ShipmentControl, error) {
	result, err := o.Edges.ShipmentControlOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryShipmentControl().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rc *RouteControl) Organization(ctx context.Context) (*Organization, error) {
	result, err := rc.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = rc.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (rc *RouteControl) BusinessUnit(ctx context.Context) (*BusinessUnit, error) {
	result, err := rc.Edges.BusinessUnitOrErr()
	if IsNotLoaded(err) {
		result, err = rc.QueryBusinessUnit().Only(ctx)
	}
	return result, err
}

func (sc *ShipmentControl) Organization(ctx context.Context) (*Organization, error) {
	result, err := sc.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = sc.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (sc *ShipmentControl) BusinessUnit(ctx context.Context) (*BusinessUnit, error) {
	result, err := sc.Edges.BusinessUnitOrErr()
	if IsNotLoaded(err) {
		result, err = sc.QueryBusinessUnit().Only(ctx)
	}
	return result, err
}

func (tca *TableChangeAlert) BusinessUnit(ctx context.Context) (*BusinessUnit, error) {
	result, err := tca.Edges.BusinessUnitOrErr()
	if IsNotLoaded(err) {
		result, err = tca.QueryBusinessUnit().Only(ctx)
	}
	return result, err
}

func (tca *TableChangeAlert) Organization(ctx context.Context) (*Organization, error) {
	result, err := tca.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = tca.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (t *Tag) BusinessUnit(ctx context.Context) (*BusinessUnit, error) {
	result, err := t.Edges.BusinessUnitOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryBusinessUnit().Only(ctx)
	}
	return result, err
}

func (t *Tag) Organization(ctx context.Context) (*Organization, error) {
	result, err := t.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (u *User) BusinessUnit(ctx context.Context) (*BusinessUnit, error) {
	result, err := u.Edges.BusinessUnitOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryBusinessUnit().Only(ctx)
	}
	return result, err
}

func (u *User) Organization(ctx context.Context) (*Organization, error) {
	result, err := u.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryOrganization().Only(ctx)
	}
	return result, err
}
